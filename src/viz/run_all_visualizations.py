#!/usr/bin/env python3
"""
Script unifi√© pour g√©n√©rer toutes les visualisations

Ex√©cute les diff√©rents analyseurs de tendances et g√©n√®re un rapport complet.
"""

import argparse
import os
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et g√®re les erreurs"""
    print(f"\nüîÑ {description}")
    print(f"üíª Commande: {' '.join(command)}")
    
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Termin√© avec succ√®s")
        if result.stdout.strip():
            print("üìã Sortie:")
            print(result.stdout)
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur")
        print(f"Code de retour: {e.returncode}")
        if e.stderr:
            print(f"Erreur: {e.stderr}")
        if e.stdout:
            print(f"Sortie: {e.stdout}")
        return False, e.stderr
    except FileNotFoundError:
        print(f"‚ùå {description} - Script non trouv√©")
        return False, "Script non trouv√©"

def create_master_index(output_base_dir):
    """Cr√©e une page d'index ma√Ætre pour toutes les visualisations"""
    print("üìÑ G√©n√©ration de l'index ma√Ætre")
    
    # Collecte des r√©pertoires de visualisation
    viz_dirs = {
        'trends': 'Analyses de Tendances',
        'interactive': 'Dashboard Interactif', 
        'geographic': 'Analyses G√©ographiques',
        'checks': 'Audits et V√©rifications'
    }
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="fr">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Centre d'Analyse √âlectorale - Nantes M√©tropole</title>
        <style>
            * {{ margin: 0; padding: 0; box-sizing: border-box; }}
            body {{ 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }}
            .container {{ 
                max-width: 1200px; 
                margin: 0 auto; 
                background: white; 
                border-radius: 20px; 
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }}
            .header {{ 
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                color: white; 
                padding: 40px; 
                text-align: center; 
            }}
            .header h1 {{ font-size: 2.5rem; margin-bottom: 10px; }}
            .header p {{ font-size: 1.1rem; opacity: 0.9; }}
            .content {{ padding: 40px; }}
            .grid {{ 
                display: grid; 
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
                gap: 30px; 
                margin-top: 30px; 
            }}
            .card {{ 
                background: white; 
                border: 1px solid #e1e8ed;
                border-radius: 15px; 
                padding: 30px; 
                box-shadow: 0 8px 25px rgba(0,0,0,0.08);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                position: relative;
                overflow: hidden;
            }}
            .card::before {{
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, #3498db, #9b59b6);
            }}
            .card:hover {{ 
                transform: translateY(-5px); 
                box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            }}
            .card-icon {{ 
                font-size: 3rem; 
                margin-bottom: 20px; 
                display: block; 
            }}
            .card h3 {{ 
                color: #2c3e50; 
                font-size: 1.4rem; 
                margin-bottom: 15px; 
            }}
            .card p {{ 
                color: #7f8c8d; 
                line-height: 1.6; 
                margin-bottom: 20px; 
            }}
            .btn {{ 
                display: inline-block; 
                background: linear-gradient(135deg, #3498db, #2980b9); 
                color: white; 
                padding: 12px 25px; 
                text-decoration: none; 
                border-radius: 8px; 
                font-weight: 600;
                transition: all 0.3s ease;
            }}
            .btn:hover {{ 
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
            }}
            .stats {{ 
                background: #f8f9fa; 
                padding: 25px; 
                border-radius: 10px; 
                margin-bottom: 30px;
                border-left: 4px solid #3498db;
            }}
            .stats-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
            }}
            .stat-item {{
                text-align: center;
            }}
            .stat-number {{
                font-size: 2rem;
                font-weight: bold;
                color: #3498db;
                display: block;
            }}
            .stat-label {{
                color: #7f8c8d;
                font-size: 0.9rem;
            }}
            .footer {{
                background: #2c3e50;
                color: white;
                text-align: center;
                padding: 20px;
                opacity: 0.8;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üó≥Ô∏è Centre d'Analyse √âlectorale</h1>
                <p>Nantes M√©tropole ‚Ä¢ Analyses et Visualisations Interactives</p>
            </div>
            
            <div class="content">
                <div class="stats">
                    <h3>üìä Informations sur l'analyse</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <span class="stat-number">4</span>
                            <span class="stat-label">Modules d'analyse</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">24</span>
                            <span class="stat-label">Communes analys√©es</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">2012-2022</span>
                            <span class="stat-label">P√©riode couverte</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">{datetime.now().strftime('%d/%m/%Y')}</span>
                            <span class="stat-label">Derni√®re mise √† jour</span>
                        </div>
                    </div>
                </div>
                
                <div class="grid">
    """
    
    # Configuration des modules avec leurs descriptions
    modules = {
        'trends': {
            'icon': 'üìà',
            'title': 'Analyses de Tendances',
            'description': '√âvolution temporelle des familles politiques, participation √©lectorale, corr√©lations socio-√©conomiques et comparaisons entre types de scrutin.',
            'files': ['evolution_familles_politiques.png', 'evolution_participation.png', 'rapport_synthese.txt']
        },
        'interactive': {
            'icon': 'üéØ', 
            'title': 'Dashboard Interactif',
            'description': 'Visualisations interactives avec Plotly : timeline, heatmaps, scatter plots et dashboard complet navigable dans votre navigateur.',
            'files': ['index.html', 'dashboard_electoral.html']
        },
        'geographic': {
            'icon': 'üó∫Ô∏è',
            'title': 'Analyses G√©ographiques', 
            'description': 'Cartes choropl√®thes des r√©sultats √©lectoraux, analyse de participation par commune et comparaisons g√©ographiques multi-temporelles.',
            'files': ['evolution_presidentielles_comparison.png', 'analyse_stabilite_communes.csv']
        },
        'checks': {
            'icon': 'üîç',
            'title': 'Audits & V√©rifications',
            'description': 'Contr√¥les qualit√© des donn√©es, v√©rification de la coh√©rence des r√©sultats et validation des calculs de vainqueurs par commune.',
            'files': ['winner_variation.csv']
        }
    }
    
    for dir_name, module_info in modules.items():
        module_path = os.path.join(output_base_dir, dir_name)
        
        # V√©rification de l'existence des fichiers
        files_exist = []
        if os.path.exists(module_path):
            for file_name in module_info['files']:
                file_path = os.path.join(module_path, file_name)
                if os.path.exists(file_path):
                    files_exist.append(file_name)
        
        status = "‚úÖ Disponible" if files_exist else "‚è≥ En cours"
        files_count = len(files_exist)
        
        html_content += f"""
                    <div class="card">
                        <span class="card-icon">{module_info['icon']}</span>
                        <h3>{module_info['title']}</h3>
                        <p>{module_info['description']}</p>
                        <p><strong>Status:</strong> {status} ‚Ä¢ <strong>Fichiers:</strong> {files_count}</p>
                        <a href="{dir_name}/index.html" class="btn" target="_blank">
                            Ouvrir l'analyse
                        </a>
                    </div>
        """
    
    html_content += """
                </div>
            </div>
            
            <div class="footer">
                <p>G√©n√©r√© automatiquement par le syst√®me d'analyse √©lectorale ‚Ä¢ Claude Code</p>
            </div>
        </div>
    </body>
    </html>
    """
    
    index_path = os.path.join(output_base_dir, 'index.html')
    with open(index_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return index_path

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="G√©n√©rateur complet de visualisations √©lectorales")
    parser.add_argument("--data", default="/app/data/processed_csv/master_ml.csv",
                       help="Chemin vers le fichier de donn√©es")
    parser.add_argument("--output", default="/app/reports",
                       help="R√©pertoire de base pour toutes les sorties")
    parser.add_argument("--skip-trends", action="store_true", help="Ignorer l'analyse des tendances")
    parser.add_argument("--skip-interactive", action="store_true", help="Ignorer le dashboard interactif")
    parser.add_argument("--skip-geographic", action="store_true", help="Ignorer l'analyse g√©ographique")
    parser.add_argument("--skip-audit", action="store_true", help="Ignorer l'audit des donn√©es")
    
    args = parser.parse_args()
    
    print("üöÄ D√©marrage de la g√©n√©ration compl√®te des visualisations")
    print(f"üìä Source de donn√©es: {args.data}")
    print(f"üìÅ R√©pertoire de sortie: {args.output}")
    
    # Cr√©ation du r√©pertoire de base
    os.makedirs(args.output, exist_ok=True)
    
    # Suivi des r√©sultats
    results = {}
    
    # 1. Audit des donn√©es (si pas ignor√©)
    if not args.skip_audit:
        success, output = run_command([
            'python', '/app/src/audit_winner.py'
        ], "Audit de coh√©rence des donn√©es")
        results['audit'] = success
    
    # 2. Analyse des tendances (si pas ignor√©)
    if not args.skip_trends:
        success, output = run_command([
            'python', '/app/src/viz/trends_analyzer.py',
            '--data', args.data,
            '--output', os.path.join(args.output, 'trends')
        ], "G√©n√©ration des analyses de tendances")
        results['trends'] = success
    
    # 3. Dashboard interactif (si pas ignor√©)
    if not args.skip_interactive:
        success, output = run_command([
            'python', '/app/src/viz/interactive_dashboard.py',
            '--data', args.data,
            '--output', os.path.join(args.output, 'interactive')
        ], "G√©n√©ration du dashboard interactif")
        results['interactive'] = success
    
    # 4. Analyse g√©ographique (si pas ignor√©) 
    if not args.skip_geographic:
        success, output = run_command([
            'python', '/app/src/viz/geographic_analyzer.py',
            '--data', args.data,
            '--output', os.path.join(args.output, 'geographic'),
            '--all-elections'
        ], "G√©n√©ration des analyses g√©ographiques")
        results['geographic'] = success
    
    # 5. G√©n√©ration de l'index ma√Ætre
    index_file = create_master_index(args.output)
    
    # 6. Rapport de synth√®se
    print(f"\nüìã RAPPORT DE SYNTH√àSE")
    print(f"=" * 50)
    
    total_modules = len(results)
    successful_modules = sum(results.values())
    
    print(f"‚úÖ Modules ex√©cut√©s avec succ√®s: {successful_modules}/{total_modules}")
    
    for module, success in results.items():
        status = "‚úÖ Succ√®s" if success else "‚ùå √âchec"
        print(f"   {module.capitalize()}: {status}")
    
    print(f"\nüìÑ Index principal g√©n√©r√©: {os.path.basename(index_file)}")
    print(f"üåê Ouvrir dans votre navigateur: {args.output}/index.html")
    print(f"üìÅ Tous les fichiers dans: {args.output}")
    
    # Sauvegarde du rapport JSON
    report_data = {
        'timestamp': datetime.now().isoformat(),
        'data_source': args.data,
        'output_directory': args.output,
        'modules_executed': results,
        'success_rate': f"{successful_modules}/{total_modules}",
        'index_file': index_file
    }
    
    report_path = os.path.join(args.output, 'generation_report.json')
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    print(f"üìä Rapport d√©taill√©: {os.path.basename(report_path)}")
    
    if successful_modules == total_modules:
        print("\nüéâ Toutes les visualisations ont √©t√© g√©n√©r√©es avec succ√®s!")
    else:
        print(f"\n‚ö†Ô∏è  {total_modules - successful_modules} module(s) ont rencontr√© des erreurs")
        sys.exit(1)

if __name__ == "__main__":
    main()